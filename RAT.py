import re
import time

# import numpy as np
import openai
import pandas as pd
from Access_to_models import chatgpt, chatgpt_topp


rat_prompt = "What word connects "

def save_response_rat(filename, temperature):
    """
       Save responses generated by the RAT (Remote Associates Test) prompt.

       This function generates responses to RAT prompts and saves them to a file.

       Parameters:
           filename (str): The name of the file to save the responses.
           temperature (float): The temperature for response generation (higher values make output more random).

       Returns:
           None
       """
    dfsol = pd.read_csv('RAT_data_humans/data_rat.txt', sep=' ', index_col=False)
    # df2 = pd.read_csv('data_changed_nan.txt', sep=' ')['Solutions']
    # print(df.to_string())
    # print(df2.to_string())
    try:
        with open(filename, 'r') as file:
            lines = len(file.readlines())
            print('curr num of lines', lines)
    except FileNotFoundError:
        lines = 0
    # Get the next row using the index
    # print('ri', lines, dfsol.iloc[lines+1]['RemoteAssociateItems'])
    if lines < len(dfsol):
        pass
    else:
        print('None')
        return None
    # print('i', i, 'lines', lines)
    curr_row = dfsol.iloc[lines]
    curr_words = curr_row['RemoteAssociateItems']
    prompt = 'What word connects curr_items? Only name the connecting word and do not explain your answer.'
    prompt = prompt.replace('curr_items', curr_words)
    print('prompt', prompt)
    try:
        response = chatgpt(prompt, temperature)
        with open(filename, 'a+') as f:
            if lines != 0:
                f.write('\n' + prompt + ' # ' + response.replace('\n', ' '))
            else:
                f.write(prompt + ' # ' + response.replace('\n', ' '))
        save_response_rat(filename, temperature)
    except openai.error.RateLimitError as e:
        print('rate limit', e)
        time.sleep(10)
        save_response_rat(filename, temperature)
        # response = chatgpt(prompt, temperature)

def filter_responses(filename):
    """
       Filter and modify RAT responses in the given file.

       This function reads RAT responses from the specified file, filters out unwanted characters,
       and writes the modified responses back to a new file.

       Parameters:
           filename (str): The name of the file containing the RAT responses.

       Returns:
           None
       """
    df = pd.read_csv('responses_rat_glm_0.txt', sep='#', names=['prompt', 'response'])
    print(df)
    # print(df.to_string())
    filtered_responses = []
    for word in df['response']:
        curr_words = str(word).split(' ')
        print(curr_words)
        filtered_words = []
        for i in curr_words:
            if i not in ['The', 'word', 'that', 'connects', 'is', 'and' 'a', 'common', 'is', 'A'] and i not in \
                    pd.read_csv('data_changed_2.txt', sep=' ')['RemoteAssociateItems'] and len(
                i.split('/')) == 1 and not i.endswith(','):
                filtered_words.append(i)
            # print(filtered_words)
        new_word = ','.join(filter(lambda x: (not x.isdigit() and not x in ['.', ' ', '\"']), filtered_words))
        new_word = new_word.replace('.', ' ')
        new_word = new_word.replace('\"', ' ')
        new_word = new_word.replace('\'', ' ')
        new_word = new_word.replace(' ', '')
        for i, l in enumerate(new_word):
            if l == '"':
                new_word = new_word[i:]
        # if len(new_word) >= 10:
        #     new_word = new_word[:10]
        # print(new_word)
        filtered_responses.append(new_word)
    # print(filtered_responses)
    new_df = pd.Series(filtered_responses)
    new_df.to_csv(filename)


def filter_responses_only_one_word(filename_raw, filename_filtered):
    """
        Filter and modify RAT responses with only one word in the given file.

        This function reads RAT responses from the specified file, filters out unwanted characters,
        and writes the modified responses back to a new file. Only responses with a single word are included.

        Parameters:
            filename_raw (str): The name of the file containing the RAT responses.
            filename_filtered (str): The name of the file to save the filtered RAT responses.

        Returns:
            None
        """
    df = pd.read_csv(filename_raw, sep='#', names=['prompt', 'response'])
    print(df)
    # print(df.to_string())
    filtered_responses = []
    for word in df['response']:
        filtered_words = []
        curr_words = word.split(' ')
        if len(curr_words) > 1:
            for i in curr_words:
                if i not in ['The', 'word', 'that', 'connects', 'is', 'and' 'a', 'common', 'is', 'A', 'Word',
                             'connecting', 'Answer:', 'can', 'be', 'connected', 'words', 'common', 'connects',
                             'words:'] and i not in pd.read_csv('data_changed_2.txt', sep=' ')[
                    'RemoteAssociateItems'] and len(i.split('/')) == 1 and not i.endswith(','):
                    filtered_words.append(i)
        # print(filtered_words)
        new_word = ','.join(filter(lambda x: (not x.isdigit() and x not in ['.', ' ', '\"', '-', '']), filtered_words))
        new_word = new_word.replace('.', ' ')
        new_word = new_word.replace('\"', ' ')
        new_word = new_word.replace('\'', ' ')
        new_word = new_word.replace(' ', '')
        filtered_responses.append(new_word)
    # print(filtered_responses)
    # print(filtered_responses)
    new_df = pd.Series(filtered_responses)
    new_df.to_csv(filename_filtered)


def filter_responses_basic(filename_raw, filename_filtered):
    """
        Basic filtering of RAT responses in the given file.

        This function reads RAT responses from the specified file, filters out unwanted characters,
        and writes the modified responses back to a new file.

        Parameters:
            filename_raw (str): The name of the file containing the RAT responses.
            filename_filtered (str): The name of the file to save the filtered RAT responses.

        Returns:
            None
        """
    df = pd.read_csv(filename_raw, sep='#', names=['prompt', 'response'])
    print(df)
    # print(df.to_string())
    filtered_responses = []
    for word in df['response']:
        filtered_words = []
        curr_words = word.split(' ')
        if len(curr_words) > 1:
            for i in curr_words:
                if i not in ['The', 'word', 'that', 'connects', 'is', 'and' 'a', 'common', 'is', 'A', 'Word',
                             'connecting', 'Answer:', 'can', 'be', 'connected', 'words', 'common', 'connects', 'words:',
                             'between', 'three'] and i not in pd.read_csv('RAT_data_humans/data_rat.txt', sep=' ')[
                    'RemoteAssociateItems'] and len(i.split('/')) == 1 and not i.endswith(','):
                    i = re.sub(r'[^a-zA-Z]', '', i)
                    # print(i)
                    filtered_words.append(i)
        new_word = ','.join(filter(lambda x: (not x.isdigit() and x.isalpha()), filtered_words))
        if new_word == '':
            filtered_responses.append('None')
        else:
            filtered_responses.append(new_word)
    # print(filtered_responses)
    # print(filtered_responses)
    new_df = pd.DataFrame()
    new_df['prompt'] = df['prompt']
    new_df['response'] = filtered_responses
    new_df.to_csv(filename_filtered, sep='#', index=False)
    delete_first_line(filename_filtered)


def evaluate_multiple_responses(filename_responses, filename_data, filename_eval):
    """
        Evaluate the accuracy of RAT responses against the solutions.

        This function reads RAT responses and their corresponding solutions from files, and evaluates the accuracy
        of the responses against the solutions. The evaluation result is saved to a new file.

        Parameters:
            filename_responses (str): The name of the file containing the RAT responses.
            filename_data (str): The name of the file containing the RAT data with solutions.
            filename_eval (str): The name of the file to save the evaluation results.

        Returns:
            None
    """
    df1 = pd.read_csv(filename_data, sep=' ')['Solutions']
    df2 = pd.read_csv(filename_responses, sep='#', names=['prompt', 'response'])['response']
    df4 = pd.read_csv(filename_data, sep=' ')['RemoteAssociateItems']
    # print(df2, df1)
    # print(df2, df1)
    right_false = []
    counter_right = 0
    for i, word in enumerate(df2):
        one_is_right = False
        curr_sol = df1[i].lower()
        # print(word, i)
        if len(word.split(',')) > 1:
            for j in word.split(','):
                if j.lower() == curr_sol:
                    # print(j.lower(), curr_sol, i)
                    one_is_right = True
            right_false.append(one_is_right)
        else:
            curr_response = word.strip().lower()
            # print(curr_sol, curr_response)
            if curr_sol == curr_response:
                # print('True', curr_response, curr_sol)
                right_false.append(True)
            else:
                if curr_sol.startswith(curr_response):
                    counter_right += 1
                    # print('True', curr_response, curr_sol)
                    right_false.append(True)
                else:
                    # print('false', curr_sol, curr_response)
                    right_false.append(False)
            # print(i)
            # print(curr_sol, curr_response)
            # pass
            # print(curr_sol, curr_response)
    df3 = pd.DataFrame()
    df3['response_filtered'] = df2.replace(',', ' ')
    df3['solution'] = df1
    df3['eval'] = right_false
    df3['RATItems'] = df4
    df3['prompt'] = pd.read_csv(filename_responses, sep='#', names=['prompt', 'response'])['prompt']
    df3['response_raw'] = pd.read_csv(filename_responses, sep='#', names=['prompt', 'response'])['response']
    # print(df3)
    df3.to_csv(filename_eval, sep='#')
    # print(i, counter_right)
    print(df3['eval'].sum())


def evaluate_responses(filename_responses, filename_data, eval_filename):
    """
       Evaluate the accuracy of RAT responses against the solutions.

       This function reads RAT responses and their corresponding solutions from files, and evaluates the accuracy
       of the responses against the solutions. The evaluation result is saved to a new file.

       Parameters:
           filename_responses (str): The name of the file containing the RAT responses.
           filename_data (str): The name of the file containing the RAT data with solutions.
           eval_filename (str): The name of the file to save the evaluation results.

       Returns:
           None
    """
    df1 = pd.read_csv(filename_data, sep=' ')['Solutions']
    df2 = pd.read_csv(filename_responses, sep=',', names=['responses'])['responses']
    df4 = pd.read_csv(filename_data, sep=' ')['RemoteAssociateItems']
    # print(df4, df2)
    # print(df2, df1)
    right_false = []
    counter_right = 0
    for i, word in enumerate(df2):
        curr_response = word.lower()
        curr_sol = df1[i].lower()
        print(curr_sol, curr_response)
        if curr_sol == curr_response:
            print(curr_sol, curr_response)
            counter_right += 1
            right_false.append(True)
            print(curr_sol, curr_response)
        else:
            if curr_sol.startswith(curr_response):
                counter_right += 1
                right_false.append(True)
                print(curr_sol, curr_response)
            else:
                # print(curr_sol, curr_response)
                right_false.append(False)
                # print(curr_sol, curr_response)
            # print(i)
            # print(curr_sol, curr_response)
            # pass
            # print(curr_sol, curr_response)
    df3 = pd.DataFrame()
    df3['response_filtered'] = df2
    df3['solution'] = df1
    df3['eval'] = right_false
    df3['RATItems'] = df4
    df3['prompt'] = pd.read_csv(filename_responses, sep='#', names=['prompt', 'response'])['prompt']
    df3['response_raw'] = pd.read_csv(filename_responses, sep='#', names=['prompt', 'response'])['response']
    # print(df3)
    df3.to_csv(eval_filename, sep='#')
    # print(i, counter_right)
    print(df3['eval'].sum())


def delete_first_line(file_path):
    # Read the content of the file
    with open(file_path, 'r') as file:
        lines = file.readlines()
    # Check if there are lines in the file
    if lines:
        # Remove the first line
        lines.pop(0)

        # Write the modified content back to the file
        with open(file_path, 'w') as file:
            file.writelines(lines)
    else:
        print("File is empty.")

# example run
# save_response_rat('test_run', '')
# filter_responses_basic('test_run', 'test_run_filtered')
# evaluate_multiple_responses('test_run_filtered', 'RAT_data_humans/data_rat.txt', 'test_run_eval')